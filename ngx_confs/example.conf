worker_processes  1;        #nginx worker 数量
error_log logs/error.log;   #指定错误日志文件路径

events {
	worker_connections 1024;
}

http {
	
    lua_package_cpath 'src/test/lua_test/lib_c_lua/?.so;';
    server {
		listen 8089;
		location /hello {
			default_type text/html;

			content_by_lua_block {
				ngx.say("HelloWorld")
			}
		}

		location /params {
			content_by_lua_block {
				local arg = ngx.req.get_uri_args(); -- Get
				for k,v in pairs(arg) do
					ngx.say("[GET ] key:", k, " v:", v);
				end

				ngx.req.read_body(); -- 解析 body 参数之前一定要先读取 body
				local arg = ngx.req.get_post_args(); -- POST
				for k,v in pairs(arg) do
					ngx.say("[POST] key:", k, " v:", v);
				end
			}
		}
        

		location /sum {

			content_by_lua_block {
				local args = ngx.req.get_uri_args();
				local result = "";
				-- iterate the args
				result = result.."======Debug info========\n";
				result = result.."type of args: "..type(args).."\n";
                
                local tab = {};
                local size = 0;

				for k,v in pairs(args) do
                    local numv = tonumber(v);
				    result = result.."key:"..k..",value(2number):"..tostring(numv).."\n"; -- numv should be nil if tonumber is not good.
				    if(numv) then
                        size = size + 1;
                        tab[size] = numv;
                    end
                end
                result = result.."have "..size.." valid numbers.\n";

				ngx.print(result);


                local libfoo = require("libfoo");
                local sum = libfoo.sum(tab, size);

                ngx.print(sum.."\n");
			}
		}
	    location /testmod {
            params_op;
        }
        location /testmod2ab {
            params_op_v2;
        }
    }
}
